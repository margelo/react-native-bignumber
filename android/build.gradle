import java.nio.file.Paths

static def findNodeModules(baseDir) {
  def basePath = baseDir.toPath().normalize()
  // Node's module resolution algorithm searches up to the root directory,
  // after which the base path will be null
  while (basePath) {
    def nodeModulesPath = Paths.get(basePath.toString(), "node_modules")
    def reactNativePath = Paths.get(nodeModulesPath.toString(), "react-native")
    if (nodeModulesPath.toFile().exists() && reactNativePath.toFile().exists()) {
      return nodeModulesPath.toString()
    }
    basePath = basePath.getParent()
  }
  throw new GradleException("BigNumber: Failed to find node_modules/ path!")
}

def nodeModules = findNodeModules(projectDir)
logger.warn("BigNumber: node_modules/ found at: ${nodeModules}")

buildscript {
  repositories {
    google()
    jcenter()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
    mavenCentral()
    maven { url 'https://jitpack.io' }
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:7.1.2'
  }
}

apply plugin: 'com.android.library'

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties['BigNumber_' + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties['BigNumber_' + name]).toInteger()
}

def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}


def reactProperties = new Properties()
file("$nodeModules/react-native/ReactAndroid/gradle.properties").withInputStream { reactProperties.load(it) }

android {
  compileSdkVersion getExtOrIntegerDefault('compileSdkVersion')
  buildToolsVersion getExtOrDefault('buildToolsVersion')
  ndkVersion getExtOrDefault('ndkVersion')

  buildFeatures {
    prefab true
  }

  defaultConfig {
    minSdkVersion 21
    targetSdkVersion getExtOrIntegerDefault('targetSdkVersion')
      externalNativeBuild {
      cmake {
        cppFlags "-fexceptions", "-frtti", "-std=c++1y", "-DONANDROID", "-DONANDROID"
        arguments '-DANDROID_STL=c++_shared',
                  "-DNODE_MODULES_DIR=${nodeModules}"
      }
    }
    ndk {
      abiFilters (*reactNativeArchitectures())
    }
  }

  externalNativeBuild {
    cmake {
      path "CMakeLists.txt"
    }
  }
    packagingOptions {
        jniLibs {
            excludes += [
              '**/libc++_shared.so',
              '**/libfbjni.so',
              '**/libreactnativejni.so',
              '**/libjsi.so',
              '**/libreact_nativemodule_core.so',
              '**/libturbomodulejsijni.so'
            ]
        }
        resources {
            excludes += ['**/MANIFEST.MF']
        }
    }


    buildTypes {
    /*release {
      minifyEnabled false
    }*/
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  buildFeatures {
    prefab true
  }
  /*lint {
      disable 'GradleCompatible'
  }*/
}

repositories {
  mavenCentral()
  google()
}

dependencies {
  // https://mvnrepository.com/artifact/com.android.ndk.thirdparty/openssl
  implementation 'com.android.ndk.thirdparty:openssl:1.1.1l-beta-1'

  implementation "com.facebook.react:react-android:"
  implementation "com.facebook.react:hermes-android:"
}